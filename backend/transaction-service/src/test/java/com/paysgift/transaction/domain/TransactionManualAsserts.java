package com.paysgift.transaction.domain;

import static org.assertj.core.api.Assertions.assertThat;

public class TransactionManualAsserts {

    /**
     * Asserts that the entity has all properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertTransactionManualAllPropertiesEquals(TransactionManual expected, TransactionManual actual) {
        assertTransactionManualAutoGeneratedPropertiesEquals(expected, actual);
        assertTransactionManualAllUpdatablePropertiesEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all updatable properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertTransactionManualAllUpdatablePropertiesEquals(TransactionManual expected, TransactionManual actual) {
        assertTransactionManualUpdatableFieldsEquals(expected, actual);
        assertTransactionManualUpdatableRelationshipsEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all the auto generated properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertTransactionManualAutoGeneratedPropertiesEquals(TransactionManual expected, TransactionManual actual) {
        assertThat(actual)
            .as("Verify TransactionManual auto generated properties")
            .satisfies(a -> assertThat(a.getId()).as("check id").isEqualTo(expected.getId()));
    }

    /**
     * Asserts that the entity has all the updatable fields set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertTransactionManualUpdatableFieldsEquals(TransactionManual expected, TransactionManual actual) {
        assertThat(actual)
            .as("Verify TransactionManual relevant properties")
            .satisfies(a -> assertThat(a.getTransactionId()).as("check transactionId").isEqualTo(expected.getTransactionId()))
            .satisfies(a -> assertThat(a.getNotes()).as("check notes").isEqualTo(expected.getNotes()))
            .satisfies(a -> assertThat(a.getCreatedAt()).as("check createdAt").isEqualTo(expected.getCreatedAt()))
            .satisfies(a -> assertThat(a.getCreatedBy()).as("check createdBy").isEqualTo(expected.getCreatedBy()))
            .satisfies(a -> assertThat(a.getUpdatedAt()).as("check updatedAt").isEqualTo(expected.getUpdatedAt()))
            .satisfies(a -> assertThat(a.getUpdatedBy()).as("check updatedBy").isEqualTo(expected.getUpdatedBy()));
    }

    /**
     * Asserts that the entity has all the updatable relationships set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertTransactionManualUpdatableRelationshipsEquals(TransactionManual expected, TransactionManual actual) {
        // empty method
    }
}
