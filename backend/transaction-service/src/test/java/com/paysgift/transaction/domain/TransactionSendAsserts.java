package com.paysgift.transaction.domain;

import static com.paysgift.transaction.domain.AssertUtils.bigDecimalCompareTo;
import static org.assertj.core.api.Assertions.assertThat;

public class TransactionSendAsserts {

    /**
     * Asserts that the entity has all properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertTransactionSendAllPropertiesEquals(TransactionSend expected, TransactionSend actual) {
        assertTransactionSendAutoGeneratedPropertiesEquals(expected, actual);
        assertTransactionSendAllUpdatablePropertiesEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all updatable properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertTransactionSendAllUpdatablePropertiesEquals(TransactionSend expected, TransactionSend actual) {
        assertTransactionSendUpdatableFieldsEquals(expected, actual);
        assertTransactionSendUpdatableRelationshipsEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all the auto generated properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertTransactionSendAutoGeneratedPropertiesEquals(TransactionSend expected, TransactionSend actual) {
        assertThat(actual)
            .as("Verify TransactionSend auto generated properties")
            .satisfies(a -> assertThat(a.getId()).as("check id").isEqualTo(expected.getId()));
    }

    /**
     * Asserts that the entity has all the updatable fields set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertTransactionSendUpdatableFieldsEquals(TransactionSend expected, TransactionSend actual) {
        assertThat(actual)
            .as("Verify TransactionSend relevant properties")
            .satisfies(a -> assertThat(a.getTransactionId()).as("check transactionId").isEqualTo(expected.getTransactionId()))
            .satisfies(a -> assertThat(a.getCode()).as("check code").isEqualTo(expected.getCode()))
            .satisfies(a -> assertThat(a.getPin()).as("check pin").isEqualTo(expected.getPin()))
            .satisfies(a -> assertThat(a.getStickerId()).as("check stickerId").isEqualTo(expected.getStickerId()))
            .satisfies(a -> assertThat(a.getSenderName()).as("check senderName").isEqualTo(expected.getSenderName()))
            .satisfies(a -> assertThat(a.getMessage()).as("check message").isEqualTo(expected.getMessage()))
            .satisfies(a -> assertThat(a.getSendType()).as("check sendType").isEqualTo(expected.getSendType()))
            .satisfies(a -> assertThat(a.getContactType()).as("check contactType").isEqualTo(expected.getContactType()))
            .satisfies(a -> assertThat(a.getRecepientName()).as("check recepientName").isEqualTo(expected.getRecepientName()))
            .satisfies(a -> assertThat(a.getRecepientContact()).as("check recepientContact").isEqualTo(expected.getRecepientContact()))
            .satisfies(a ->
                assertThat(a.getRecepientContactHash()).as("check recepientContactHash").isEqualTo(expected.getRecepientContactHash())
            )
            .satisfies(a -> assertThat(a.getIsImmediately()).as("check isImmediately").isEqualTo(expected.getIsImmediately()))
            .satisfies(a -> assertThat(a.getSendSchedule()).as("check sendSchedule").isEqualTo(expected.getSendSchedule()))
            .satisfies(a -> assertThat(a.getAddressLabel()).as("check addressLabel").isEqualTo(expected.getAddressLabel()))
            .satisfies(a -> assertThat(a.getCountryId()).as("check countryId").isEqualTo(expected.getCountryId()))
            .satisfies(a -> assertThat(a.getProvinceId()).as("check provinceId").isEqualTo(expected.getProvinceId()))
            .satisfies(a -> assertThat(a.getCityId()).as("check cityId").isEqualTo(expected.getCityId()))
            .satisfies(a -> assertThat(a.getDistrictId()).as("check districtId").isEqualTo(expected.getDistrictId()))
            .satisfies(a -> assertThat(a.getVillageId()).as("check villageId").isEqualTo(expected.getVillageId()))
            .satisfies(a -> assertThat(a.getZipcode()).as("check zipcode").isEqualTo(expected.getZipcode()))
            .satisfies(a -> assertThat(a.getAddress()).as("check address").isEqualTo(expected.getAddress()))
            .satisfies(a -> assertThat(a.getCourierNote()).as("check courierNote").isEqualTo(expected.getCourierNote()))
            .satisfies(a -> assertThat(a.getLongitude()).as("check longitude").isEqualTo(expected.getLongitude()))
            .satisfies(a -> assertThat(a.getLatitude()).as("check latitude").isEqualTo(expected.getLatitude()))
            .satisfies(a -> assertThat(a.getReferenceId()).as("check referenceId").isEqualTo(expected.getReferenceId()))
            .satisfies(a -> assertThat(a.getSendBy()).as("check sendBy").isEqualTo(expected.getSendBy()))
            .satisfies(a ->
                assertThat(a.getDeliveryPrice())
                    .as("check deliveryPrice")
                    .usingComparator(bigDecimalCompareTo)
                    .isEqualTo(expected.getDeliveryPrice())
            )
            .satisfies(a ->
                assertThat(a.getDeliveryPriceUsd())
                    .as("check deliveryPriceUsd")
                    .usingComparator(bigDecimalCompareTo)
                    .isEqualTo(expected.getDeliveryPriceUsd())
            )
            .satisfies(a ->
                assertThat(a.getDiscDeliveryPrice())
                    .as("check discDeliveryPrice")
                    .usingComparator(bigDecimalCompareTo)
                    .isEqualTo(expected.getDiscDeliveryPrice())
            )
            .satisfies(a ->
                assertThat(a.getDiscDeliveryPriceUsd())
                    .as("check discDeliveryPriceUsd")
                    .usingComparator(bigDecimalCompareTo)
                    .isEqualTo(expected.getDiscDeliveryPriceUsd())
            )
            .satisfies(a ->
                assertThat(a.getTotalDeliveryPrice())
                    .as("check totalDeliveryPrice")
                    .usingComparator(bigDecimalCompareTo)
                    .isEqualTo(expected.getTotalDeliveryPrice())
            )
            .satisfies(a ->
                assertThat(a.getTotalDeliveryPriceUsd())
                    .as("check totalDeliveryPriceUsd")
                    .usingComparator(bigDecimalCompareTo)
                    .isEqualTo(expected.getTotalDeliveryPriceUsd())
            )
            .satisfies(a -> assertThat(a.getStatusDelivery()).as("check statusDelivery").isEqualTo(expected.getStatusDelivery()))
            .satisfies(a -> assertThat(a.getStatusReason()).as("check statusReason").isEqualTo(expected.getStatusReason()))
            .satisfies(a -> assertThat(a.getBlibliPackageId()).as("check blibliPackageId").isEqualTo(expected.getBlibliPackageId()))
            .satisfies(a -> assertThat(a.getTryOpen()).as("check tryOpen").isEqualTo(expected.getTryOpen()))
            .satisfies(a -> assertThat(a.getCreatedAt()).as("check createdAt").isEqualTo(expected.getCreatedAt()))
            .satisfies(a -> assertThat(a.getCreatedBy()).as("check createdBy").isEqualTo(expected.getCreatedBy()))
            .satisfies(a -> assertThat(a.getUpdatedAt()).as("check updatedAt").isEqualTo(expected.getUpdatedAt()))
            .satisfies(a -> assertThat(a.getUpdatedBy()).as("check updatedBy").isEqualTo(expected.getUpdatedBy()));
    }

    /**
     * Asserts that the entity has all the updatable relationships set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertTransactionSendUpdatableRelationshipsEquals(TransactionSend expected, TransactionSend actual) {
        // empty method
    }
}
