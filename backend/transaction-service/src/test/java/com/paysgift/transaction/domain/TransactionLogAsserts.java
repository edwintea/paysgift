package com.paysgift.transaction.domain;

import static org.assertj.core.api.Assertions.assertThat;

public class TransactionLogAsserts {

    /**
     * Asserts that the entity has all properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertTransactionLogAllPropertiesEquals(TransactionLog expected, TransactionLog actual) {
        assertTransactionLogAutoGeneratedPropertiesEquals(expected, actual);
        assertTransactionLogAllUpdatablePropertiesEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all updatable properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertTransactionLogAllUpdatablePropertiesEquals(TransactionLog expected, TransactionLog actual) {
        assertTransactionLogUpdatableFieldsEquals(expected, actual);
        assertTransactionLogUpdatableRelationshipsEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all the auto generated properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertTransactionLogAutoGeneratedPropertiesEquals(TransactionLog expected, TransactionLog actual) {
        assertThat(actual)
            .as("Verify TransactionLog auto generated properties")
            .satisfies(a -> assertThat(a.getId()).as("check id").isEqualTo(expected.getId()));
    }

    /**
     * Asserts that the entity has all the updatable fields set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertTransactionLogUpdatableFieldsEquals(TransactionLog expected, TransactionLog actual) {
        assertThat(actual)
            .as("Verify TransactionLog relevant properties")
            .satisfies(a -> assertThat(a.getTransactionId()).as("check transactionId").isEqualTo(expected.getTransactionId()))
            .satisfies(a -> assertThat(a.getTitle()).as("check title").isEqualTo(expected.getTitle()))
            .satisfies(a -> assertThat(a.getInfo()).as("check info").isEqualTo(expected.getInfo()))
            .satisfies(a -> assertThat(a.getCreatedAt()).as("check createdAt").isEqualTo(expected.getCreatedAt()))
            .satisfies(a -> assertThat(a.getCreatedBy()).as("check createdBy").isEqualTo(expected.getCreatedBy()))
            .satisfies(a -> assertThat(a.getUpdatedAt()).as("check updatedAt").isEqualTo(expected.getUpdatedAt()))
            .satisfies(a -> assertThat(a.getUpdatedBy()).as("check updatedBy").isEqualTo(expected.getUpdatedBy()));
    }

    /**
     * Asserts that the entity has all the updatable relationships set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertTransactionLogUpdatableRelationshipsEquals(TransactionLog expected, TransactionLog actual) {
        // empty method
    }
}
