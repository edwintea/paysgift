package com.paysgift.transaction.domain;

import static com.paysgift.transaction.domain.AssertUtils.bigDecimalCompareTo;
import static org.assertj.core.api.Assertions.assertThat;

public class TransactionProductAsserts {

    /**
     * Asserts that the entity has all properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertTransactionProductAllPropertiesEquals(TransactionProduct expected, TransactionProduct actual) {
        assertTransactionProductAutoGeneratedPropertiesEquals(expected, actual);
        assertTransactionProductAllUpdatablePropertiesEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all updatable properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertTransactionProductAllUpdatablePropertiesEquals(TransactionProduct expected, TransactionProduct actual) {
        assertTransactionProductUpdatableFieldsEquals(expected, actual);
        assertTransactionProductUpdatableRelationshipsEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all the auto generated properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertTransactionProductAutoGeneratedPropertiesEquals(TransactionProduct expected, TransactionProduct actual) {
        assertThat(actual)
            .as("Verify TransactionProduct auto generated properties")
            .satisfies(a -> assertThat(a.getId()).as("check id").isEqualTo(expected.getId()));
    }

    /**
     * Asserts that the entity has all the updatable fields set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertTransactionProductUpdatableFieldsEquals(TransactionProduct expected, TransactionProduct actual) {
        assertThat(actual)
            .as("Verify TransactionProduct relevant properties")
            .satisfies(a -> assertThat(a.getTransactionId()).as("check transactionId").isEqualTo(expected.getTransactionId()))
            .satisfies(a -> assertThat(a.getTransactionSendId()).as("check transactionSendId").isEqualTo(expected.getTransactionSendId()))
            .satisfies(a -> assertThat(a.getProductId()).as("check productId").isEqualTo(expected.getProductId()))
            .satisfies(a -> assertThat(a.getCountryId()).as("check countryId").isEqualTo(expected.getCountryId()))
            .satisfies(a -> assertThat(a.getBrandId()).as("check brandId").isEqualTo(expected.getBrandId()))
            .satisfies(a -> assertThat(a.getCode()).as("check code").isEqualTo(expected.getCode()))
            .satisfies(a -> assertThat(a.getParentCode()).as("check parentCode").isEqualTo(expected.getParentCode()))
            .satisfies(a -> assertThat(a.getSkuCode()).as("check skuCode").isEqualTo(expected.getSkuCode()))
            .satisfies(a -> assertThat(a.getName()).as("check name").isEqualTo(expected.getName()))
            .satisfies(a -> assertThat(a.getNameEn()).as("check nameEn").isEqualTo(expected.getNameEn()))
            .satisfies(a -> assertThat(a.getDescription()).as("check description").isEqualTo(expected.getDescription()))
            .satisfies(a -> assertThat(a.getDescriptionEn()).as("check descriptionEn").isEqualTo(expected.getDescriptionEn()))
            .satisfies(a -> assertThat(a.getTnc()).as("check tnc").isEqualTo(expected.getTnc()))
            .satisfies(a -> assertThat(a.getTncEn()).as("check tncEn").isEqualTo(expected.getTncEn()))
            .satisfies(a -> assertThat(a.getHowToClaim()).as("check howToClaim").isEqualTo(expected.getHowToClaim()))
            .satisfies(a -> assertThat(a.getHowToClaimEn()).as("check howToClaimEn").isEqualTo(expected.getHowToClaimEn()))
            .satisfies(a -> assertThat(a.getImage()).as("check image").isEqualTo(expected.getImage()))
            .satisfies(a -> assertThat(a.getDenom()).as("check denom").usingComparator(bigDecimalCompareTo).isEqualTo(expected.getDenom()))
            .satisfies(a ->
                assertThat(a.getBuyingPrice())
                    .as("check buyingPrice")
                    .usingComparator(bigDecimalCompareTo)
                    .isEqualTo(expected.getBuyingPrice())
            )
            .satisfies(a ->
                assertThat(a.getBuyingPriceUsd())
                    .as("check buyingPriceUsd")
                    .usingComparator(bigDecimalCompareTo)
                    .isEqualTo(expected.getBuyingPriceUsd())
            )
            .satisfies(a -> assertThat(a.getPrice()).as("check price").usingComparator(bigDecimalCompareTo).isEqualTo(expected.getPrice()))
            .satisfies(a ->
                assertThat(a.getPriceUsd()).as("check priceUsd").usingComparator(bigDecimalCompareTo).isEqualTo(expected.getPriceUsd())
            )
            .satisfies(a ->
                assertThat(a.getDiscPrice()).as("check discPrice").usingComparator(bigDecimalCompareTo).isEqualTo(expected.getDiscPrice())
            )
            .satisfies(a ->
                assertThat(a.getDiscPriceUsd())
                    .as("check discPriceUsd")
                    .usingComparator(bigDecimalCompareTo)
                    .isEqualTo(expected.getDiscPriceUsd())
            )
            .satisfies(a ->
                assertThat(a.getTotalPrice())
                    .as("check totalPrice")
                    .usingComparator(bigDecimalCompareTo)
                    .isEqualTo(expected.getTotalPrice())
            )
            .satisfies(a ->
                assertThat(a.getTotalPriceUsd())
                    .as("check totalPriceUsd")
                    .usingComparator(bigDecimalCompareTo)
                    .isEqualTo(expected.getTotalPriceUsd())
            )
            .satisfies(a -> assertThat(a.getIsDelivery()).as("check isDelivery").isEqualTo(expected.getIsDelivery()))
            .satisfies(a -> assertThat(a.getPaymentStatus()).as("check paymentStatus").isEqualTo(expected.getPaymentStatus()))
            .satisfies(a -> assertThat(a.getStatus()).as("check status").isEqualTo(expected.getStatus()))
            .satisfies(a -> assertThat(a.getIsCode()).as("check isCode").isEqualTo(expected.getIsCode()))
            .satisfies(a -> assertThat(a.getVoucherLink()).as("check voucherLink").isEqualTo(expected.getVoucherLink()))
            .satisfies(a -> assertThat(a.getVoucherCode()).as("check voucherCode").isEqualTo(expected.getVoucherCode()))
            .satisfies(a -> assertThat(a.getVoucherPin()).as("check voucherPin").isEqualTo(expected.getVoucherPin()))
            .satisfies(a -> assertThat(a.getVoucherIssuance()).as("check voucherIssuance").isEqualTo(expected.getVoucherIssuance()))
            .satisfies(a -> assertThat(a.getVoucherExpired()).as("check voucherExpired").isEqualTo(expected.getVoucherExpired()))
            .satisfies(a -> assertThat(a.getVoucherReference()).as("check voucherReference").isEqualTo(expected.getVoucherReference()))
            .satisfies(a -> assertThat(a.getReferenceNumber()).as("check referenceNumber").isEqualTo(expected.getReferenceNumber()))
            .satisfies(a -> assertThat(a.getErrorCode()).as("check errorCode").isEqualTo(expected.getErrorCode()))
            .satisfies(a -> assertThat(a.getErrorReason()).as("check errorReason").isEqualTo(expected.getErrorReason()))
            .satisfies(a -> assertThat(a.getRetry()).as("check retry").isEqualTo(expected.getRetry()))
            .satisfies(a -> assertThat(a.getBlibliItemId()).as("check blibliItemId").isEqualTo(expected.getBlibliItemId()))
            .satisfies(a -> assertThat(a.getCreatedAt()).as("check createdAt").isEqualTo(expected.getCreatedAt()))
            .satisfies(a -> assertThat(a.getCreatedBy()).as("check createdBy").isEqualTo(expected.getCreatedBy()))
            .satisfies(a -> assertThat(a.getUpdatedAt()).as("check updatedAt").isEqualTo(expected.getUpdatedAt()))
            .satisfies(a -> assertThat(a.getUpdatedBy()).as("check updatedBy").isEqualTo(expected.getUpdatedBy()));
    }

    /**
     * Asserts that the entity has all the updatable relationships set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertTransactionProductUpdatableRelationshipsEquals(TransactionProduct expected, TransactionProduct actual) {
        // empty method
    }
}
