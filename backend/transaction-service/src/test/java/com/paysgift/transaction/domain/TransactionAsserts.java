package com.paysgift.transaction.domain;

import static com.paysgift.transaction.domain.AssertUtils.bigDecimalCompareTo;
import static org.assertj.core.api.Assertions.assertThat;

public class TransactionAsserts {

    /**
     * Asserts that the entity has all properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertTransactionAllPropertiesEquals(Transaction expected, Transaction actual) {
        assertTransactionAutoGeneratedPropertiesEquals(expected, actual);
        assertTransactionAllUpdatablePropertiesEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all updatable properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertTransactionAllUpdatablePropertiesEquals(Transaction expected, Transaction actual) {
        assertTransactionUpdatableFieldsEquals(expected, actual);
        assertTransactionUpdatableRelationshipsEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all the auto generated properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertTransactionAutoGeneratedPropertiesEquals(Transaction expected, Transaction actual) {
        assertThat(actual)
            .as("Verify Transaction auto generated properties")
            .satisfies(a -> assertThat(a.getId()).as("check id").isEqualTo(expected.getId()));
    }

    /**
     * Asserts that the entity has all the updatable fields set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertTransactionUpdatableFieldsEquals(Transaction expected, Transaction actual) {
        assertThat(actual)
            .as("Verify Transaction relevant properties")
            .satisfies(a -> assertThat(a.getCustomerId()).as("check customerId").isEqualTo(expected.getCustomerId()))
            .satisfies(a -> assertThat(a.getCountryId()).as("check countryId").isEqualTo(expected.getCountryId()))
            .satisfies(a -> assertThat(a.getClientId()).as("check clientId").isEqualTo(expected.getClientId()))
            .satisfies(a -> assertThat(a.getChannelId()).as("check channelId").isEqualTo(expected.getChannelId()))
            .satisfies(a -> assertThat(a.getBrandId()).as("check brandId").isEqualTo(expected.getBrandId()))
            .satisfies(a -> assertThat(a.getCurrencyId()).as("check currencyId").isEqualTo(expected.getCurrencyId()))
            .satisfies(a -> assertThat(a.getCurrencyCode()).as("check currencyCode").isEqualTo(expected.getCurrencyCode()))
            .satisfies(a ->
                assertThat(a.getCurrencyRate())
                    .as("check currencyRate")
                    .usingComparator(bigDecimalCompareTo)
                    .isEqualTo(expected.getCurrencyRate())
            )
            .satisfies(a -> assertThat(a.getPaymentId()).as("check paymentId").isEqualTo(expected.getPaymentId()))
            .satisfies(a -> assertThat(a.getCouponCodeId()).as("check couponCodeId").isEqualTo(expected.getCouponCodeId()))
            .satisfies(a -> assertThat(a.getShopbackReference()).as("check shopbackReference").isEqualTo(expected.getShopbackReference()))
            .satisfies(a -> assertThat(a.getCode()).as("check code").isEqualTo(expected.getCode()))
            .satisfies(a -> assertThat(a.getInvoiceCode()).as("check invoiceCode").isEqualTo(expected.getInvoiceCode()))
            .satisfies(a ->
                assertThat(a.getProductPrice())
                    .as("check productPrice")
                    .usingComparator(bigDecimalCompareTo)
                    .isEqualTo(expected.getProductPrice())
            )
            .satisfies(a ->
                assertThat(a.getProductPriceUsd())
                    .as("check productPriceUsd")
                    .usingComparator(bigDecimalCompareTo)
                    .isEqualTo(expected.getProductPriceUsd())
            )
            .satisfies(a ->
                assertThat(a.getDeliveryPrice())
                    .as("check deliveryPrice")
                    .usingComparator(bigDecimalCompareTo)
                    .isEqualTo(expected.getDeliveryPrice())
            )
            .satisfies(a ->
                assertThat(a.getDeliveryPriceUsd())
                    .as("check deliveryPriceUsd")
                    .usingComparator(bigDecimalCompareTo)
                    .isEqualTo(expected.getDeliveryPriceUsd())
            )
            .satisfies(a ->
                assertThat(a.getDiscProductPrice())
                    .as("check discProductPrice")
                    .usingComparator(bigDecimalCompareTo)
                    .isEqualTo(expected.getDiscProductPrice())
            )
            .satisfies(a ->
                assertThat(a.getDiscProductPriceUsd())
                    .as("check discProductPriceUsd")
                    .usingComparator(bigDecimalCompareTo)
                    .isEqualTo(expected.getDiscProductPriceUsd())
            )
            .satisfies(a ->
                assertThat(a.getDiscDeliveryPrice())
                    .as("check discDeliveryPrice")
                    .usingComparator(bigDecimalCompareTo)
                    .isEqualTo(expected.getDiscDeliveryPrice())
            )
            .satisfies(a ->
                assertThat(a.getDiscDeliveryPriceUsd())
                    .as("check discDeliveryPriceUsd")
                    .usingComparator(bigDecimalCompareTo)
                    .isEqualTo(expected.getDiscDeliveryPriceUsd())
            )
            .satisfies(a ->
                assertThat(a.getDiscCouponPrice())
                    .as("check discCouponPrice")
                    .usingComparator(bigDecimalCompareTo)
                    .isEqualTo(expected.getDiscCouponPrice())
            )
            .satisfies(a ->
                assertThat(a.getDiscCouponPriceUsd())
                    .as("check discCouponPriceUsd")
                    .usingComparator(bigDecimalCompareTo)
                    .isEqualTo(expected.getDiscCouponPriceUsd())
            )
            .satisfies(a ->
                assertThat(a.getServiceFee())
                    .as("check serviceFee")
                    .usingComparator(bigDecimalCompareTo)
                    .isEqualTo(expected.getServiceFee())
            )
            .satisfies(a ->
                assertThat(a.getServiceFeeUsd())
                    .as("check serviceFeeUsd")
                    .usingComparator(bigDecimalCompareTo)
                    .isEqualTo(expected.getServiceFeeUsd())
            )
            .satisfies(a ->
                assertThat(a.getTotalPayment())
                    .as("check totalPayment")
                    .usingComparator(bigDecimalCompareTo)
                    .isEqualTo(expected.getTotalPayment())
            )
            .satisfies(a ->
                assertThat(a.getTotalPaymentUsd())
                    .as("check totalPaymentUsd")
                    .usingComparator(bigDecimalCompareTo)
                    .isEqualTo(expected.getTotalPaymentUsd())
            )
            .satisfies(a -> assertThat(a.getPaymentNumber()).as("check paymentNumber").isEqualTo(expected.getPaymentNumber()))
            .satisfies(a -> assertThat(a.getPaymentQr()).as("check paymentQr").isEqualTo(expected.getPaymentQr()))
            .satisfies(a -> assertThat(a.getPaymentLink()).as("check paymentLink").isEqualTo(expected.getPaymentLink()))
            .satisfies(a -> assertThat(a.getPaymentStatus()).as("check paymentStatus").isEqualTo(expected.getPaymentStatus()))
            .satisfies(a -> assertThat(a.getPaymentExpired()).as("check paymentExpired").isEqualTo(expected.getPaymentExpired()))
            .satisfies(a -> assertThat(a.getPaymentReferenceId()).as("check paymentReferenceId").isEqualTo(expected.getPaymentReferenceId())
            )
            .satisfies(a -> assertThat(a.getPaidedAt()).as("check paidedAt").isEqualTo(expected.getPaidedAt()))
            .satisfies(a -> assertThat(a.getStatus()).as("check status").isEqualTo(expected.getStatus()))
            .satisfies(a -> assertThat(a.getCreatedAt()).as("check createdAt").isEqualTo(expected.getCreatedAt()))
            .satisfies(a -> assertThat(a.getCreatedBy()).as("check createdBy").isEqualTo(expected.getCreatedBy()))
            .satisfies(a -> assertThat(a.getUpdatedAt()).as("check updatedAt").isEqualTo(expected.getUpdatedAt()))
            .satisfies(a -> assertThat(a.getUpdatedBy()).as("check updatedBy").isEqualTo(expected.getUpdatedBy()));
    }

    /**
     * Asserts that the entity has all the updatable relationships set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertTransactionUpdatableRelationshipsEquals(Transaction expected, Transaction actual) {
        // empty method
    }
}
