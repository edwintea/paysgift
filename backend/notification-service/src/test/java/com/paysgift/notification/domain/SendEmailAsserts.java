package com.paysgift.notification.domain;

import static org.assertj.core.api.Assertions.assertThat;

public class SendEmailAsserts {

    /**
     * Asserts that the entity has all properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertSendEmailAllPropertiesEquals(SendEmail expected, SendEmail actual) {
        assertSendEmailAutoGeneratedPropertiesEquals(expected, actual);
        assertSendEmailAllUpdatablePropertiesEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all updatable properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertSendEmailAllUpdatablePropertiesEquals(SendEmail expected, SendEmail actual) {
        assertSendEmailUpdatableFieldsEquals(expected, actual);
        assertSendEmailUpdatableRelationshipsEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all the auto generated properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertSendEmailAutoGeneratedPropertiesEquals(SendEmail expected, SendEmail actual) {
        assertThat(actual)
            .as("Verify SendEmail auto generated properties")
            .satisfies(a -> assertThat(a.getId()).as("check id").isEqualTo(expected.getId()));
    }

    /**
     * Asserts that the entity has all the updatable fields set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertSendEmailUpdatableFieldsEquals(SendEmail expected, SendEmail actual) {
        assertThat(actual)
            .as("Verify SendEmail relevant properties")
            .satisfies(a -> assertThat(a.getMailTo()).as("check mailTo").isEqualTo(expected.getMailTo()))
            .satisfies(a -> assertThat(a.getMailToName()).as("check mailToName").isEqualTo(expected.getMailToName()))
            .satisfies(a -> assertThat(a.getSubject()).as("check subject").isEqualTo(expected.getSubject()))
            .satisfies(a -> assertThat(a.getBody()).as("check body").isEqualTo(expected.getBody()))
            .satisfies(a -> assertThat(a.getAttached1()).as("check attached1").isEqualTo(expected.getAttached1()))
            .satisfies(a -> assertThat(a.getAttachedUnlink1()).as("check attachedUnlink1").isEqualTo(expected.getAttachedUnlink1()))
            .satisfies(a -> assertThat(a.getAttached2()).as("check attached2").isEqualTo(expected.getAttached2()))
            .satisfies(a -> assertThat(a.getAttachedUnlink2()).as("check attachedUnlink2").isEqualTo(expected.getAttachedUnlink2()))
            .satisfies(a -> assertThat(a.getAttached3()).as("check attached3").isEqualTo(expected.getAttached3()))
            .satisfies(a -> assertThat(a.getAttachedUnlink3()).as("check attachedUnlink3").isEqualTo(expected.getAttachedUnlink3()))
            .satisfies(a -> assertThat(a.getDateTimeEntry()).as("check dateTimeEntry").isEqualTo(expected.getDateTimeEntry()))
            .satisfies(a -> assertThat(a.getDateTimeSend()).as("check dateTimeSend").isEqualTo(expected.getDateTimeSend()))
            .satisfies(a -> assertThat(a.getMailFrom()).as("check mailFrom").isEqualTo(expected.getMailFrom()))
            .satisfies(a -> assertThat(a.getMailFromName()).as("check mailFromName").isEqualTo(expected.getMailFromName()))
            .satisfies(a -> assertThat(a.getStatus()).as("check status").isEqualTo(expected.getStatus()))
            .satisfies(a -> assertThat(a.getInfo()).as("check info").isEqualTo(expected.getInfo()))
            .satisfies(a -> assertThat(a.getMailCc()).as("check mailCc").isEqualTo(expected.getMailCc()))
            .satisfies(a -> assertThat(a.getMailCcName()).as("check mailCcName").isEqualTo(expected.getMailCcName()))
            .satisfies(a -> assertThat(a.getTableRelation()).as("check tableRelation").isEqualTo(expected.getTableRelation()))
            .satisfies(a -> assertThat(a.getTableId()).as("check tableId").isEqualTo(expected.getTableId()))
            .satisfies(a -> assertThat(a.getCreatedAt()).as("check createdAt").isEqualTo(expected.getCreatedAt()))
            .satisfies(a -> assertThat(a.getCreatedBy()).as("check createdBy").isEqualTo(expected.getCreatedBy()))
            .satisfies(a -> assertThat(a.getUpdatedAt()).as("check updatedAt").isEqualTo(expected.getUpdatedAt()))
            .satisfies(a -> assertThat(a.getUpdatedBy()).as("check updatedBy").isEqualTo(expected.getUpdatedBy()));
    }

    /**
     * Asserts that the entity has all the updatable relationships set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertSendEmailUpdatableRelationshipsEquals(SendEmail expected, SendEmail actual) {
        // empty method
    }
}
