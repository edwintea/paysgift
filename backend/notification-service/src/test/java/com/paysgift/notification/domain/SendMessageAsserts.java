package com.paysgift.notification.domain;

import static org.assertj.core.api.Assertions.assertThat;

public class SendMessageAsserts {

    /**
     * Asserts that the entity has all properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertSendMessageAllPropertiesEquals(SendMessage expected, SendMessage actual) {
        assertSendMessageAutoGeneratedPropertiesEquals(expected, actual);
        assertSendMessageAllUpdatablePropertiesEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all updatable properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertSendMessageAllUpdatablePropertiesEquals(SendMessage expected, SendMessage actual) {
        assertSendMessageUpdatableFieldsEquals(expected, actual);
        assertSendMessageUpdatableRelationshipsEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all the auto generated properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertSendMessageAutoGeneratedPropertiesEquals(SendMessage expected, SendMessage actual) {
        assertThat(actual)
            .as("Verify SendMessage auto generated properties")
            .satisfies(a -> assertThat(a.getId()).as("check id").isEqualTo(expected.getId()));
    }

    /**
     * Asserts that the entity has all the updatable fields set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertSendMessageUpdatableFieldsEquals(SendMessage expected, SendMessage actual) {
        assertThat(actual)
            .as("Verify SendMessage relevant properties")
            .satisfies(a -> assertThat(a.getPhoneNumber()).as("check phoneNumber").isEqualTo(expected.getPhoneNumber()))
            .satisfies(a -> assertThat(a.getMessage()).as("check message").isEqualTo(expected.getMessage()))
            .satisfies(a -> assertThat(a.getDateTimeEntry()).as("check dateTimeEntry").isEqualTo(expected.getDateTimeEntry()))
            .satisfies(a -> assertThat(a.getDateTimeSend()).as("check dateTimeSend").isEqualTo(expected.getDateTimeSend()))
            .satisfies(a -> assertThat(a.getStatus()).as("check status").isEqualTo(expected.getStatus()))
            .satisfies(a -> assertThat(a.getResponseText()).as("check responseText").isEqualTo(expected.getResponseText()))
            .satisfies(a -> assertThat(a.getMessageId()).as("check messageId").isEqualTo(expected.getMessageId()))
            .satisfies(a -> assertThat(a.getStatusMessage()).as("check statusMessage").isEqualTo(expected.getStatusMessage()))
            .satisfies(a -> assertThat(a.getTableRelation()).as("check tableRelation").isEqualTo(expected.getTableRelation()))
            .satisfies(a -> assertThat(a.getTableId()).as("check tableId").isEqualTo(expected.getTableId()));
    }

    /**
     * Asserts that the entity has all the updatable relationships set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertSendMessageUpdatableRelationshipsEquals(SendMessage expected, SendMessage actual) {
        // empty method
    }
}
