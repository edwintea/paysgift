package com.paysgift.notification.domain;

import static org.assertj.core.api.Assertions.assertThat;

public class SendWhatsAppAsserts {

    /**
     * Asserts that the entity has all properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertSendWhatsAppAllPropertiesEquals(SendWhatsApp expected, SendWhatsApp actual) {
        assertSendWhatsAppAutoGeneratedPropertiesEquals(expected, actual);
        assertSendWhatsAppAllUpdatablePropertiesEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all updatable properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertSendWhatsAppAllUpdatablePropertiesEquals(SendWhatsApp expected, SendWhatsApp actual) {
        assertSendWhatsAppUpdatableFieldsEquals(expected, actual);
        assertSendWhatsAppUpdatableRelationshipsEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all the auto generated properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertSendWhatsAppAutoGeneratedPropertiesEquals(SendWhatsApp expected, SendWhatsApp actual) {
        assertThat(actual)
            .as("Verify SendWhatsApp auto generated properties")
            .satisfies(a -> assertThat(a.getId()).as("check id").isEqualTo(expected.getId()));
    }

    /**
     * Asserts that the entity has all the updatable fields set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertSendWhatsAppUpdatableFieldsEquals(SendWhatsApp expected, SendWhatsApp actual) {
        assertThat(actual)
            .as("Verify SendWhatsApp relevant properties")
            .satisfies(a -> assertThat(a.getCountryCode()).as("check countryCode").isEqualTo(expected.getCountryCode()))
            .satisfies(a -> assertThat(a.getPhoneNumber()).as("check phoneNumber").isEqualTo(expected.getPhoneNumber()))
            .satisfies(a -> assertThat(a.getMessage()).as("check message").isEqualTo(expected.getMessage()))
            .satisfies(a -> assertThat(a.getImageUrl()).as("check imageUrl").isEqualTo(expected.getImageUrl()))
            .satisfies(a -> assertThat(a.getDateTimeEntry()).as("check dateTimeEntry").isEqualTo(expected.getDateTimeEntry()))
            .satisfies(a -> assertThat(a.getDateTimeSend()).as("check dateTimeSend").isEqualTo(expected.getDateTimeSend()))
            .satisfies(a -> assertThat(a.getStatus()).as("check status").isEqualTo(expected.getStatus()))
            .satisfies(a -> assertThat(a.getResponseTxt()).as("check responseTxt").isEqualTo(expected.getResponseTxt()))
            .satisfies(a -> assertThat(a.getMessageId()).as("check messageId").isEqualTo(expected.getMessageId()))
            .satisfies(a -> assertThat(a.getStatusMessage()).as("check statusMessage").isEqualTo(expected.getStatusMessage()))
            .satisfies(a -> assertThat(a.getTableRelation()).as("check tableRelation").isEqualTo(expected.getTableRelation()))
            .satisfies(a -> assertThat(a.getTableId()).as("check tableId").isEqualTo(expected.getTableId()));
    }

    /**
     * Asserts that the entity has all the updatable relationships set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertSendWhatsAppUpdatableRelationshipsEquals(SendWhatsApp expected, SendWhatsApp actual) {
        // empty method
    }
}
