package com.paysgift.paymentservice.domain;

import static com.paysgift.paymentservice.domain.AssertUtils.bigDecimalCompareTo;
import static org.assertj.core.api.Assertions.assertThat;

public class PaymentTransactionRecurringAsserts {

    /**
     * Asserts that the entity has all properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertPaymentTransactionRecurringAllPropertiesEquals(
        PaymentTransactionRecurring expected,
        PaymentTransactionRecurring actual
    ) {
        assertPaymentTransactionRecurringAutoGeneratedPropertiesEquals(expected, actual);
        assertPaymentTransactionRecurringAllUpdatablePropertiesEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all updatable properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertPaymentTransactionRecurringAllUpdatablePropertiesEquals(
        PaymentTransactionRecurring expected,
        PaymentTransactionRecurring actual
    ) {
        assertPaymentTransactionRecurringUpdatableFieldsEquals(expected, actual);
        assertPaymentTransactionRecurringUpdatableRelationshipsEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all the auto generated properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertPaymentTransactionRecurringAutoGeneratedPropertiesEquals(
        PaymentTransactionRecurring expected,
        PaymentTransactionRecurring actual
    ) {
        assertThat(actual)
            .as("Verify PaymentTransactionRecurring auto generated properties")
            .satisfies(a -> assertThat(a.getId()).as("check id").isEqualTo(expected.getId()));
    }

    /**
     * Asserts that the entity has all the updatable fields set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertPaymentTransactionRecurringUpdatableFieldsEquals(
        PaymentTransactionRecurring expected,
        PaymentTransactionRecurring actual
    ) {
        assertThat(actual)
            .as("Verify PaymentTransactionRecurring relevant properties")
            .satisfies(a -> assertThat(a.getPaymentProviderId()).as("check paymentProviderId").isEqualTo(expected.getPaymentProviderId()))
            .satisfies(a -> assertThat(a.getPaymentListId()).as("check paymentListId").isEqualTo(expected.getPaymentListId()))
            .satisfies(a ->
                assertThat(a.getPaymentTransactionId()).as("check paymentTransactionId").isEqualTo(expected.getPaymentTransactionId())
            )
            .satisfies(a -> assertThat(a.getCustomerId()).as("check customerId").isEqualTo(expected.getCustomerId()))
            .satisfies(a -> assertThat(a.getPaymentMethodId()).as("check paymentMethodId").isEqualTo(expected.getPaymentMethodId()))
            .satisfies(a -> assertThat(a.getRecurringPlanId()).as("check recurringPlanId").isEqualTo(expected.getRecurringPlanId()))
            .satisfies(a -> assertThat(a.getCycleId()).as("check cycleId").isEqualTo(expected.getCycleId()))
            .satisfies(a -> assertThat(a.getScheduleId()).as("check scheduleId").isEqualTo(expected.getScheduleId()))
            .satisfies(a -> assertThat(a.getActionId()).as("check actionId").isEqualTo(expected.getActionId()))
            .satisfies(a -> assertThat(a.getStatus()).as("check status").isEqualTo(expected.getStatus()))
            .satisfies(a -> assertThat(a.getCycle()).as("check cycle").isEqualTo(expected.getCycle()))
            .satisfies(a ->
                assertThat(a.getAmount()).as("check amount").usingComparator(bigDecimalCompareTo).isEqualTo(expected.getAmount())
            )
            .satisfies(a -> assertThat(a.getTax()).as("check tax").usingComparator(bigDecimalCompareTo).isEqualTo(expected.getTax()))
            .satisfies(a ->
                assertThat(a.getPaymentCharge())
                    .as("check paymentCharge")
                    .usingComparator(bigDecimalCompareTo)
                    .isEqualTo(expected.getPaymentCharge())
            )
            .satisfies(a -> assertThat(a.getTotal()).as("check total").usingComparator(bigDecimalCompareTo).isEqualTo(expected.getTotal()))
            .satisfies(a -> assertThat(a.getDatetimePaid()).as("check datetimePaid").isEqualTo(expected.getDatetimePaid()))
            .satisfies(a -> assertThat(a.getTotalRetry()).as("check totalRetry").isEqualTo(expected.getTotalRetry()))
            .satisfies(a -> assertThat(a.getAttemptRetry()).as("check attemptRetry").isEqualTo(expected.getAttemptRetry()))
            .satisfies(a -> assertThat(a.getDatetimeLastRetry()).as("check datetimeLastRetry").isEqualTo(expected.getDatetimeLastRetry()))
            .satisfies(a -> assertThat(a.getSendCallback()).as("check sendCallback").isEqualTo(expected.getSendCallback()))
            .satisfies(a ->
                assertThat(a.getSendCallbackAttempt()).as("check sendCallbackAttempt").isEqualTo(expected.getSendCallbackAttempt())
            )
            .satisfies(a -> assertThat(a.getPaymentSchedule()).as("check paymentSchedule").isEqualTo(expected.getPaymentSchedule()))
            .satisfies(a -> assertThat(a.getPaymentLink()).as("check paymentLink").isEqualTo(expected.getPaymentLink()))
            .satisfies(a -> assertThat(a.getReferenceId()).as("check referenceId").isEqualTo(expected.getReferenceId()))
            .satisfies(a -> assertThat(a.getDataObj()).as("check dataObj").isEqualTo(expected.getDataObj()))
            .satisfies(a -> assertThat(a.getCreatedAt()).as("check createdAt").isEqualTo(expected.getCreatedAt()))
            .satisfies(a -> assertThat(a.getCreatedBy()).as("check createdBy").isEqualTo(expected.getCreatedBy()))
            .satisfies(a -> assertThat(a.getUpdatedAt()).as("check updatedAt").isEqualTo(expected.getUpdatedAt()))
            .satisfies(a -> assertThat(a.getUpdatedBy()).as("check updatedBy").isEqualTo(expected.getUpdatedBy()));
    }

    /**
     * Asserts that the entity has all the updatable relationships set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertPaymentTransactionRecurringUpdatableRelationshipsEquals(
        PaymentTransactionRecurring expected,
        PaymentTransactionRecurring actual
    ) {
        // empty method
    }
}
