package com.paysgift.paymentservice.domain;

import static org.assertj.core.api.Assertions.assertThat;

public class DanaOrderAsserts {

    /**
     * Asserts that the entity has all properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertDanaOrderAllPropertiesEquals(DanaOrder expected, DanaOrder actual) {
        assertDanaOrderAutoGeneratedPropertiesEquals(expected, actual);
        assertDanaOrderAllUpdatablePropertiesEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all updatable properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertDanaOrderAllUpdatablePropertiesEquals(DanaOrder expected, DanaOrder actual) {
        assertDanaOrderUpdatableFieldsEquals(expected, actual);
        assertDanaOrderUpdatableRelationshipsEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all the auto generated properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertDanaOrderAutoGeneratedPropertiesEquals(DanaOrder expected, DanaOrder actual) {
        assertThat(actual)
            .as("Verify DanaOrder auto generated properties")
            .satisfies(a -> assertThat(a.getId()).as("check id").isEqualTo(expected.getId()));
    }

    /**
     * Asserts that the entity has all the updatable fields set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertDanaOrderUpdatableFieldsEquals(DanaOrder expected, DanaOrder actual) {
        assertThat(actual)
            .as("Verify DanaOrder relevant properties")
            .satisfies(a -> assertThat(a.getVersion()).as("check version").isEqualTo(expected.getVersion()))
            .satisfies(a -> assertThat(a.getFunctionName()).as("check functionName").isEqualTo(expected.getFunctionName()))
            .satisfies(a -> assertThat(a.getReqTime()).as("check reqTime").isEqualTo(expected.getReqTime()))
            .satisfies(a -> assertThat(a.getRespTime()).as("check respTime").isEqualTo(expected.getRespTime()))
            .satisfies(a -> assertThat(a.getIsActive()).as("check isActive").isEqualTo(expected.getIsActive()))
            .satisfies(a -> assertThat(a.getReqMsgId()).as("check reqMsgId").isEqualTo(expected.getReqMsgId()))
            .satisfies(a -> assertThat(a.getRequestId()).as("check requestId").isEqualTo(expected.getRequestId()))
            .satisfies(a -> assertThat(a.getOrderId()).as("check orderId").isEqualTo(expected.getOrderId()))
            .satisfies(a -> assertThat(a.getCode()).as("check code").isEqualTo(expected.getCode()))
            .satisfies(a -> assertThat(a.getStatus()).as("check status").isEqualTo(expected.getStatus()))
            .satisfies(a -> assertThat(a.getMessage()).as("check message").isEqualTo(expected.getMessage()))
            .satisfies(a -> assertThat(a.getProductId()).as("check productId").isEqualTo(expected.getProductId()))
            .satisfies(a -> assertThat(a.getIssuanceId()).as("check issuanceId").isEqualTo(expected.getIssuanceId()))
            .satisfies(a -> assertThat(a.getVoucherCode()).as("check voucherCode").isEqualTo(expected.getVoucherCode()))
            .satisfies(a -> assertThat(a.getVoucherPin()).as("check voucherPin").isEqualTo(expected.getVoucherPin()))
            .satisfies(a -> assertThat(a.getIssuanceDate()).as("check issuanceDate").isEqualTo(expected.getIssuanceDate()))
            .satisfies(a -> assertThat(a.getExpiredDate()).as("check expiredDate").isEqualTo(expected.getExpiredDate()))
            .satisfies(a -> assertThat(a.getExtendInfo()).as("check extendInfo").isEqualTo(expected.getExtendInfo()))
            .satisfies(a -> assertThat(a.getSendEmailNotif()).as("check sendEmailNotif").isEqualTo(expected.getSendEmailNotif()))
            .satisfies(a -> assertThat(a.getCreatedAt()).as("check createdAt").isEqualTo(expected.getCreatedAt()))
            .satisfies(a -> assertThat(a.getCreatedBy()).as("check createdBy").isEqualTo(expected.getCreatedBy()))
            .satisfies(a -> assertThat(a.getUpdatedAt()).as("check updatedAt").isEqualTo(expected.getUpdatedAt()))
            .satisfies(a -> assertThat(a.getUpdatedBy()).as("check updatedBy").isEqualTo(expected.getUpdatedBy()));
    }

    /**
     * Asserts that the entity has all the updatable relationships set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertDanaOrderUpdatableRelationshipsEquals(DanaOrder expected, DanaOrder actual) {
        // empty method
    }
}
