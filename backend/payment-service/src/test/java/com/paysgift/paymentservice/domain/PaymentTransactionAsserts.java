package com.paysgift.paymentservice.domain;

import static com.paysgift.paymentservice.domain.AssertUtils.bigDecimalCompareTo;
import static com.paysgift.paymentservice.domain.AssertUtils.zonedDataTimeSameInstant;
import static org.assertj.core.api.Assertions.assertThat;

public class PaymentTransactionAsserts {

    /**
     * Asserts that the entity has all properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertPaymentTransactionAllPropertiesEquals(PaymentTransaction expected, PaymentTransaction actual) {
        assertPaymentTransactionAutoGeneratedPropertiesEquals(expected, actual);
        assertPaymentTransactionAllUpdatablePropertiesEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all updatable properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertPaymentTransactionAllUpdatablePropertiesEquals(PaymentTransaction expected, PaymentTransaction actual) {
        assertPaymentTransactionUpdatableFieldsEquals(expected, actual);
        assertPaymentTransactionUpdatableRelationshipsEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all the auto generated properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertPaymentTransactionAutoGeneratedPropertiesEquals(PaymentTransaction expected, PaymentTransaction actual) {
        assertThat(actual)
            .as("Verify PaymentTransaction auto generated properties")
            .satisfies(a -> assertThat(a.getId()).as("check id").isEqualTo(expected.getId()));
    }

    /**
     * Asserts that the entity has all the updatable fields set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertPaymentTransactionUpdatableFieldsEquals(PaymentTransaction expected, PaymentTransaction actual) {
        assertThat(actual)
            .as("Verify PaymentTransaction relevant properties")
            .satisfies(a -> assertThat(a.getStatus()).as("check status").isEqualTo(expected.getStatus()))
            .satisfies(a -> assertThat(a.getPaymentProviderId()).as("check paymentProviderId").isEqualTo(expected.getPaymentProviderId()))
            .satisfies(a -> assertThat(a.getPaymentListId()).as("check paymentListId").isEqualTo(expected.getPaymentListId()))
            .satisfies(a -> assertThat(a.getOrderId()).as("check orderId").isEqualTo(expected.getOrderId()))
            .satisfies(a -> assertThat(a.getOrderNo()).as("check orderNo").isEqualTo(expected.getOrderNo()))
            .satisfies(a -> assertThat(a.getInvoiceId()).as("check invoiceId").isEqualTo(expected.getInvoiceId()))
            .satisfies(a -> assertThat(a.getReferenceId()).as("check referenceId").isEqualTo(expected.getReferenceId()))
            .satisfies(a -> assertThat(a.getClientId()).as("check clientId").isEqualTo(expected.getClientId()))
            .satisfies(a ->
                assertThat(a.getAmount()).as("check amount").usingComparator(bigDecimalCompareTo).isEqualTo(expected.getAmount())
            )
            .satisfies(a -> assertThat(a.getTax()).as("check tax").usingComparator(bigDecimalCompareTo).isEqualTo(expected.getTax()))
            .satisfies(a ->
                assertThat(a.getPaymentCharge())
                    .as("check paymentCharge")
                    .usingComparator(bigDecimalCompareTo)
                    .isEqualTo(expected.getPaymentCharge())
            )
            .satisfies(a -> assertThat(a.getTotal()).as("check total").usingComparator(bigDecimalCompareTo).isEqualTo(expected.getTotal()))
            .satisfies(a -> assertThat(a.getExpiryRequest()).as("check expiryRequest").isEqualTo(expected.getExpiryRequest()))
            .satisfies(a -> assertThat(a.getExpiryTime()).as("check expiryTime").isEqualTo(expected.getExpiryTime()))
            .satisfies(a ->
                assertThat(a.getExpiryLink())
                    .as("check expiryLink")
                    .usingComparator(zonedDataTimeSameInstant)
                    .isEqualTo(expected.getExpiryLink())
            )
            .satisfies(a -> assertThat(a.getProcessExpired()).as("check processExpired").isEqualTo(expected.getProcessExpired()))
            .satisfies(a -> assertThat(a.getPaymentCode()).as("check paymentCode").isEqualTo(expected.getPaymentCode()))
            .satisfies(a -> assertThat(a.getPaymentDeeplink()).as("check paymentDeeplink").isEqualTo(expected.getPaymentDeeplink()))
            .satisfies(a -> assertThat(a.getPaymentObj()).as("check paymentObj").isEqualTo(expected.getPaymentObj()))
            .satisfies(a -> assertThat(a.getNotes()).as("check notes").isEqualTo(expected.getNotes()))
            .satisfies(a -> assertThat(a.getSgiUid()).as("check sgiUid").isEqualTo(expected.getSgiUid()))
            .satisfies(a -> assertThat(a.getCustomerName()).as("check customerName").isEqualTo(expected.getCustomerName()))
            .satisfies(a -> assertThat(a.getCustomerEmail()).as("check customerEmail").isEqualTo(expected.getCustomerEmail()))
            .satisfies(a ->
                assertThat(a.getCustomerMobileNumber()).as("check customerMobileNumber").isEqualTo(expected.getCustomerMobileNumber())
            )
            .satisfies(a -> assertThat(a.getIsSubscription()).as("check isSubscription").isEqualTo(expected.getIsSubscription()))
            .satisfies(a -> assertThat(a.getTotalRecurring()).as("check totalRecurring").isEqualTo(expected.getTotalRecurring()))
            .satisfies(a -> assertThat(a.getRetryTotal()).as("check retryTotal").isEqualTo(expected.getRetryTotal()))
            .satisfies(a -> assertThat(a.getRetryInterval()).as("check retryInterval").isEqualTo(expected.getRetryInterval()))
            .satisfies(a -> assertThat(a.getCycleActive()).as("check cycleActive").isEqualTo(expected.getCycleActive()))
            .satisfies(a -> assertThat(a.getMode()).as("check mode").isEqualTo(expected.getMode()))
            .satisfies(a -> assertThat(a.getModeInterval()).as("check modeInterval").isEqualTo(expected.getModeInterval()))
            .satisfies(a -> assertThat(a.getNextPayment()).as("check nextPayment").isEqualTo(expected.getNextPayment()))
            .satisfies(a -> assertThat(a.getSendCallback()).as("check sendCallback").isEqualTo(expected.getSendCallback()))
            .satisfies(a ->
                assertThat(a.getSendCallbackAttempt()).as("check sendCallbackAttempt").isEqualTo(expected.getSendCallbackAttempt())
            )
            .satisfies(a -> assertThat(a.getSendEmail()).as("check sendEmail").isEqualTo(expected.getSendEmail()))
            .satisfies(a -> assertThat(a.getSendEmailAttempt()).as("check sendEmailAttempt").isEqualTo(expected.getSendEmailAttempt()))
            .satisfies(a -> assertThat(a.getCreatedAt()).as("check createdAt").isEqualTo(expected.getCreatedAt()))
            .satisfies(a -> assertThat(a.getCreatedBy()).as("check createdBy").isEqualTo(expected.getCreatedBy()))
            .satisfies(a -> assertThat(a.getUpdatedAt()).as("check updatedAt").isEqualTo(expected.getUpdatedAt()))
            .satisfies(a -> assertThat(a.getUpdatedBy()).as("check updatedBy").isEqualTo(expected.getUpdatedBy()));
    }

    /**
     * Asserts that the entity has all the updatable relationships set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertPaymentTransactionUpdatableRelationshipsEquals(PaymentTransaction expected, PaymentTransaction actual) {
        // empty method
    }
}
