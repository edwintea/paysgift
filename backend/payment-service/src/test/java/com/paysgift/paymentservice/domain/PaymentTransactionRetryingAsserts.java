package com.paysgift.paymentservice.domain;

import static org.assertj.core.api.Assertions.assertThat;

public class PaymentTransactionRetryingAsserts {

    /**
     * Asserts that the entity has all properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertPaymentTransactionRetryingAllPropertiesEquals(
        PaymentTransactionRetrying expected,
        PaymentTransactionRetrying actual
    ) {
        assertPaymentTransactionRetryingAutoGeneratedPropertiesEquals(expected, actual);
        assertPaymentTransactionRetryingAllUpdatablePropertiesEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all updatable properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertPaymentTransactionRetryingAllUpdatablePropertiesEquals(
        PaymentTransactionRetrying expected,
        PaymentTransactionRetrying actual
    ) {
        assertPaymentTransactionRetryingUpdatableFieldsEquals(expected, actual);
        assertPaymentTransactionRetryingUpdatableRelationshipsEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all the auto generated properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertPaymentTransactionRetryingAutoGeneratedPropertiesEquals(
        PaymentTransactionRetrying expected,
        PaymentTransactionRetrying actual
    ) {
        assertThat(actual)
            .as("Verify PaymentTransactionRetrying auto generated properties")
            .satisfies(a -> assertThat(a.getId()).as("check id").isEqualTo(expected.getId()));
    }

    /**
     * Asserts that the entity has all the updatable fields set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertPaymentTransactionRetryingUpdatableFieldsEquals(
        PaymentTransactionRetrying expected,
        PaymentTransactionRetrying actual
    ) {
        assertThat(actual)
            .as("Verify PaymentTransactionRetrying relevant properties")
            .satisfies(a ->
                assertThat(a.getPaymentTransactionRecurringId())
                    .as("check paymentTransactionRecurringId")
                    .isEqualTo(expected.getPaymentTransactionRecurringId())
            )
            .satisfies(a -> assertThat(a.getStatus()).as("check status").isEqualTo(expected.getStatus()))
            .satisfies(a -> assertThat(a.getAttemptRetry()).as("check attemptRetry").isEqualTo(expected.getAttemptRetry()))
            .satisfies(a -> assertThat(a.getDatetimeRetry()).as("check datetimeRetry").isEqualTo(expected.getDatetimeRetry()))
            .satisfies(a -> assertThat(a.getDatetimeNextRetry()).as("check datetimeNextRetry").isEqualTo(expected.getDatetimeNextRetry()))
            .satisfies(a -> assertThat(a.getSendCallback()).as("check sendCallback").isEqualTo(expected.getSendCallback()))
            .satisfies(a ->
                assertThat(a.getSendCallbackAttempt()).as("check sendCallbackAttempt").isEqualTo(expected.getSendCallbackAttempt())
            )
            .satisfies(a -> assertThat(a.getSendEmail()).as("check sendEmail").isEqualTo(expected.getSendEmail()))
            .satisfies(a -> assertThat(a.getSendEmailAttempt()).as("check sendEmailAttempt").isEqualTo(expected.getSendEmailAttempt()))
            .satisfies(a -> assertThat(a.getCreatedAt()).as("check createdAt").isEqualTo(expected.getCreatedAt()))
            .satisfies(a -> assertThat(a.getCreatedBy()).as("check createdBy").isEqualTo(expected.getCreatedBy()))
            .satisfies(a -> assertThat(a.getUpdatedAt()).as("check updatedAt").isEqualTo(expected.getUpdatedAt()))
            .satisfies(a -> assertThat(a.getUpdatedBy()).as("check updatedBy").isEqualTo(expected.getUpdatedBy()));
    }

    /**
     * Asserts that the entity has all the updatable relationships set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertPaymentTransactionRetryingUpdatableRelationshipsEquals(
        PaymentTransactionRetrying expected,
        PaymentTransactionRetrying actual
    ) {
        // empty method
    }
}
