package com.paysgift.paymentservice.domain;

import static org.assertj.core.api.Assertions.assertThat;

public class PaymentTransactionCampaignAsserts {

    /**
     * Asserts that the entity has all properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertPaymentTransactionCampaignAllPropertiesEquals(
        PaymentTransactionCampaign expected,
        PaymentTransactionCampaign actual
    ) {
        assertPaymentTransactionCampaignAutoGeneratedPropertiesEquals(expected, actual);
        assertPaymentTransactionCampaignAllUpdatablePropertiesEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all updatable properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertPaymentTransactionCampaignAllUpdatablePropertiesEquals(
        PaymentTransactionCampaign expected,
        PaymentTransactionCampaign actual
    ) {
        assertPaymentTransactionCampaignUpdatableFieldsEquals(expected, actual);
        assertPaymentTransactionCampaignUpdatableRelationshipsEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all the auto generated properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertPaymentTransactionCampaignAutoGeneratedPropertiesEquals(
        PaymentTransactionCampaign expected,
        PaymentTransactionCampaign actual
    ) {
        assertThat(actual)
            .as("Verify PaymentTransactionCampaign auto generated properties")
            .satisfies(a -> assertThat(a.getId()).as("check id").isEqualTo(expected.getId()));
    }

    /**
     * Asserts that the entity has all the updatable fields set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertPaymentTransactionCampaignUpdatableFieldsEquals(
        PaymentTransactionCampaign expected,
        PaymentTransactionCampaign actual
    ) {
        assertThat(actual)
            .as("Verify PaymentTransactionCampaign relevant properties")
            .satisfies(a ->
                assertThat(a.getPaymentTransactionId()).as("check paymentTransactionId").isEqualTo(expected.getPaymentTransactionId())
            )
            .satisfies(a -> assertThat(a.getCycle()).as("check cycle").isEqualTo(expected.getCycle()))
            .satisfies(a -> assertThat(a.getHitDatetime()).as("check hitDatetime").isEqualTo(expected.getHitDatetime()))
            .satisfies(a -> assertThat(a.getHitStatus()).as("check hitStatus").isEqualTo(expected.getHitStatus()))
            .satisfies(a -> assertThat(a.getCreatedAt()).as("check createdAt").isEqualTo(expected.getCreatedAt()))
            .satisfies(a -> assertThat(a.getCreatedBy()).as("check createdBy").isEqualTo(expected.getCreatedBy()))
            .satisfies(a -> assertThat(a.getUpdatedAt()).as("check updatedAt").isEqualTo(expected.getUpdatedAt()))
            .satisfies(a -> assertThat(a.getUpdatedBy()).as("check updatedBy").isEqualTo(expected.getUpdatedBy()));
    }

    /**
     * Asserts that the entity has all the updatable relationships set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertPaymentTransactionCampaignUpdatableRelationshipsEquals(
        PaymentTransactionCampaign expected,
        PaymentTransactionCampaign actual
    ) {
        // empty method
    }
}
