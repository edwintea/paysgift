package com.paysgift.paymentservice.domain;

import static org.assertj.core.api.Assertions.assertThat;

public class PaymentCampaignAsserts {

    /**
     * Asserts that the entity has all properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertPaymentCampaignAllPropertiesEquals(PaymentCampaign expected, PaymentCampaign actual) {
        assertPaymentCampaignAutoGeneratedPropertiesEquals(expected, actual);
        assertPaymentCampaignAllUpdatablePropertiesEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all updatable properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertPaymentCampaignAllUpdatablePropertiesEquals(PaymentCampaign expected, PaymentCampaign actual) {
        assertPaymentCampaignUpdatableFieldsEquals(expected, actual);
        assertPaymentCampaignUpdatableRelationshipsEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all the auto generated properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertPaymentCampaignAutoGeneratedPropertiesEquals(PaymentCampaign expected, PaymentCampaign actual) {
        assertThat(actual)
            .as("Verify PaymentCampaign auto generated properties")
            .satisfies(a -> assertThat(a.getId()).as("check id").isEqualTo(expected.getId()));
    }

    /**
     * Asserts that the entity has all the updatable fields set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertPaymentCampaignUpdatableFieldsEquals(PaymentCampaign expected, PaymentCampaign actual) {
        assertThat(actual)
            .as("Verify PaymentCampaign relevant properties")
            .satisfies(a -> assertThat(a.getCampaignId()).as("check campaignId").isEqualTo(expected.getCampaignId()))
            .satisfies(a -> assertThat(a.getFreeMonth()).as("check freeMonth").isEqualTo(expected.getFreeMonth()))
            .satisfies(a -> assertThat(a.getValidFrom()).as("check validFrom").isEqualTo(expected.getValidFrom()))
            .satisfies(a -> assertThat(a.getValidTo()).as("check validTo").isEqualTo(expected.getValidTo()))
            .satisfies(a -> assertThat(a.getCreatedAt()).as("check createdAt").isEqualTo(expected.getCreatedAt()))
            .satisfies(a -> assertThat(a.getCreatedBy()).as("check createdBy").isEqualTo(expected.getCreatedBy()))
            .satisfies(a -> assertThat(a.getUpdatedAt()).as("check updatedAt").isEqualTo(expected.getUpdatedAt()))
            .satisfies(a -> assertThat(a.getUpdatedBy()).as("check updatedBy").isEqualTo(expected.getUpdatedBy()));
    }

    /**
     * Asserts that the entity has all the updatable relationships set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertPaymentCampaignUpdatableRelationshipsEquals(PaymentCampaign expected, PaymentCampaign actual) {
        // empty method
    }
}
