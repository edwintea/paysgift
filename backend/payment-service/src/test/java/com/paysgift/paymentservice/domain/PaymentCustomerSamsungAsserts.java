package com.paysgift.paymentservice.domain;

import static org.assertj.core.api.Assertions.assertThat;

public class PaymentCustomerSamsungAsserts {

    /**
     * Asserts that the entity has all properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertPaymentCustomerSamsungAllPropertiesEquals(PaymentCustomerSamsung expected, PaymentCustomerSamsung actual) {
        assertPaymentCustomerSamsungAutoGeneratedPropertiesEquals(expected, actual);
        assertPaymentCustomerSamsungAllUpdatablePropertiesEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all updatable properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertPaymentCustomerSamsungAllUpdatablePropertiesEquals(
        PaymentCustomerSamsung expected,
        PaymentCustomerSamsung actual
    ) {
        assertPaymentCustomerSamsungUpdatableFieldsEquals(expected, actual);
        assertPaymentCustomerSamsungUpdatableRelationshipsEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all the auto generated properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertPaymentCustomerSamsungAutoGeneratedPropertiesEquals(
        PaymentCustomerSamsung expected,
        PaymentCustomerSamsung actual
    ) {
        assertThat(actual)
            .as("Verify PaymentCustomerSamsung auto generated properties")
            .satisfies(a -> assertThat(a.getId()).as("check id").isEqualTo(expected.getId()));
    }

    /**
     * Asserts that the entity has all the updatable fields set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertPaymentCustomerSamsungUpdatableFieldsEquals(PaymentCustomerSamsung expected, PaymentCustomerSamsung actual) {
        assertThat(actual)
            .as("Verify PaymentCustomerSamsung relevant properties")
            .satisfies(a -> assertThat(a.getSgiUid()).as("check sgiUid").isEqualTo(expected.getSgiUid()))
            .satisfies(a -> assertThat(a.getName()).as("check name").isEqualTo(expected.getName()))
            .satisfies(a -> assertThat(a.getEmail()).as("check email").isEqualTo(expected.getEmail()))
            .satisfies(a -> assertThat(a.getMobileNumber()).as("check mobileNumber").isEqualTo(expected.getMobileNumber()))
            .satisfies(a -> assertThat(a.getCreatedAt()).as("check createdAt").isEqualTo(expected.getCreatedAt()))
            .satisfies(a -> assertThat(a.getCreatedBy()).as("check createdBy").isEqualTo(expected.getCreatedBy()))
            .satisfies(a -> assertThat(a.getUpdatedAt()).as("check updatedAt").isEqualTo(expected.getUpdatedAt()))
            .satisfies(a -> assertThat(a.getUpdatedBy()).as("check updatedBy").isEqualTo(expected.getUpdatedBy()));
    }

    /**
     * Asserts that the entity has all the updatable relationships set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertPaymentCustomerSamsungUpdatableRelationshipsEquals(
        PaymentCustomerSamsung expected,
        PaymentCustomerSamsung actual
    ) {
        // empty method
    }
}
