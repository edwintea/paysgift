package com.paysgift.paymentservice.domain;

import static com.paysgift.paymentservice.domain.AssertUtils.bigDecimalCompareTo;
import static org.assertj.core.api.Assertions.assertThat;

public class PaymentListAsserts {

    /**
     * Asserts that the entity has all properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertPaymentListAllPropertiesEquals(PaymentList expected, PaymentList actual) {
        assertPaymentListAutoGeneratedPropertiesEquals(expected, actual);
        assertPaymentListAllUpdatablePropertiesEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all updatable properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertPaymentListAllUpdatablePropertiesEquals(PaymentList expected, PaymentList actual) {
        assertPaymentListUpdatableFieldsEquals(expected, actual);
        assertPaymentListUpdatableRelationshipsEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all the auto generated properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertPaymentListAutoGeneratedPropertiesEquals(PaymentList expected, PaymentList actual) {
        assertThat(actual)
            .as("Verify PaymentList auto generated properties")
            .satisfies(a -> assertThat(a.getId()).as("check id").isEqualTo(expected.getId()));
    }

    /**
     * Asserts that the entity has all the updatable fields set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertPaymentListUpdatableFieldsEquals(PaymentList expected, PaymentList actual) {
        assertThat(actual)
            .as("Verify PaymentList relevant properties")
            .satisfies(a -> assertThat(a.getStatus()).as("check status").isEqualTo(expected.getStatus()))
            .satisfies(a -> assertThat(a.getType()).as("check type").isEqualTo(expected.getType()))
            .satisfies(a -> assertThat(a.getCode()).as("check code").isEqualTo(expected.getCode()))
            .satisfies(a -> assertThat(a.getName()).as("check name").isEqualTo(expected.getName()))
            .satisfies(a -> assertThat(a.getPaymentProviderId()).as("check paymentProviderId").isEqualTo(expected.getPaymentProviderId()))
            .satisfies(a ->
                assertThat(a.getPaymentFeePercentage())
                    .as("check paymentFeePercentage")
                    .usingComparator(bigDecimalCompareTo)
                    .isEqualTo(expected.getPaymentFeePercentage())
            )
            .satisfies(a ->
                assertThat(a.getPaymentFeeNominal())
                    .as("check paymentFeeNominal")
                    .usingComparator(bigDecimalCompareTo)
                    .isEqualTo(expected.getPaymentFeeNominal())
            )
            .satisfies(a -> assertThat(a.getPaymentNotes()).as("check paymentNotes").isEqualTo(expected.getPaymentNotes()))
            .satisfies(a -> assertThat(a.getImageUrl()).as("check imageUrl").isEqualTo(expected.getImageUrl()))
            .satisfies(a -> assertThat(a.getHowToPay()).as("check howToPay").isEqualTo(expected.getHowToPay()))
            .satisfies(a -> assertThat(a.getNote()).as("check note").isEqualTo(expected.getNote()))
            .satisfies(a -> assertThat(a.getCreatedAt()).as("check createdAt").isEqualTo(expected.getCreatedAt()))
            .satisfies(a -> assertThat(a.getCreatedBy()).as("check createdBy").isEqualTo(expected.getCreatedBy()))
            .satisfies(a -> assertThat(a.getUpdatedAt()).as("check updatedAt").isEqualTo(expected.getUpdatedAt()))
            .satisfies(a -> assertThat(a.getUpdatedBy()).as("check updatedBy").isEqualTo(expected.getUpdatedBy()));
    }

    /**
     * Asserts that the entity has all the updatable relationships set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertPaymentListUpdatableRelationshipsEquals(PaymentList expected, PaymentList actual) {
        // empty method
    }
}
