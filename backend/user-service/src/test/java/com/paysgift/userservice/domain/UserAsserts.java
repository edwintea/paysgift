package com.paysgift.userservice.domain;

import static org.assertj.core.api.Assertions.assertThat;

public class UserAsserts {

    /**
     * Asserts that the entity has all properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertUserAllPropertiesEquals(User expected, User actual) {
        assertUserAutoGeneratedPropertiesEquals(expected, actual);
        assertUserAllUpdatablePropertiesEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all updatable properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertUserAllUpdatablePropertiesEquals(User expected, User actual) {
        assertUserUpdatableFieldsEquals(expected, actual);
        assertUserUpdatableRelationshipsEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all the auto generated properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertUserAutoGeneratedPropertiesEquals(User expected, User actual) {
        assertThat(actual)
            .as("Verify User auto generated properties")
            .satisfies(a -> assertThat(a.getId()).as("check id").isEqualTo(expected.getId()));
    }

    /**
     * Asserts that the entity has all the updatable fields set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertUserUpdatableFieldsEquals(User expected, User actual) {
        assertThat(actual)
            .as("Verify User relevant properties")
            .satisfies(a -> assertThat(a.getGroupId()).as("check groupId").isEqualTo(expected.getGroupId()))
            .satisfies(a -> assertThat(a.getCountryId()).as("check countryId").isEqualTo(expected.getCountryId()))
            .satisfies(a -> assertThat(a.getIsActive()).as("check isActive").isEqualTo(expected.getIsActive()))
            .satisfies(a -> assertThat(a.getImage()).as("check image").isEqualTo(expected.getImage()))
            .satisfies(a -> assertThat(a.getUsername()).as("check username").isEqualTo(expected.getUsername()))
            .satisfies(a -> assertThat(a.getPassword()).as("check password").isEqualTo(expected.getPassword()))
            .satisfies(a -> assertThat(a.getFullname()).as("check fullname").isEqualTo(expected.getFullname()))
            .satisfies(a -> assertThat(a.getEmail()).as("check email").isEqualTo(expected.getEmail()))
            .satisfies(a -> assertThat(a.getMobileNumber()).as("check mobileNumber").isEqualTo(expected.getMobileNumber()))
            .satisfies(a -> assertThat(a.getIsAdmin()).as("check isAdmin").isEqualTo(expected.getIsAdmin()))
            .satisfies(a -> assertThat(a.getIsInternal()).as("check isInternal").isEqualTo(expected.getIsInternal()))
            .satisfies(a -> assertThat(a.getByLocation()).as("check byLocation").isEqualTo(expected.getByLocation()))
            .satisfies(a -> assertThat(a.getLocation()).as("check location").isEqualTo(expected.getLocation()))
            .satisfies(a -> assertThat(a.getGoogle2faSecret()).as("check google2faSecret").isEqualTo(expected.getGoogle2faSecret()))
            .satisfies(a -> assertThat(a.getOtpNumber()).as("check otpNumber").isEqualTo(expected.getOtpNumber()))
            .satisfies(a -> assertThat(a.getOtpStatus()).as("check otpStatus").isEqualTo(expected.getOtpStatus()))
            .satisfies(a -> assertThat(a.getOtpExpiredDate()).as("check otpExpiredDate").isEqualTo(expected.getOtpExpiredDate()))
            .satisfies(a -> assertThat(a.getLastLoginAt()).as("check lastLoginAt").isEqualTo(expected.getLastLoginAt()))
            .satisfies(a -> assertThat(a.getCreatedAt()).as("check createdAt").isEqualTo(expected.getCreatedAt()))
            .satisfies(a -> assertThat(a.getUpdatedAt()).as("check updatedAt").isEqualTo(expected.getUpdatedAt()))
            .satisfies(a -> assertThat(a.getIs2fa()).as("check is2fa").isEqualTo(expected.getIs2fa()));
    }

    /**
     * Asserts that the entity has all the updatable relationships set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertUserUpdatableRelationshipsEquals(User expected, User actual) {
        // empty method
    }
}
