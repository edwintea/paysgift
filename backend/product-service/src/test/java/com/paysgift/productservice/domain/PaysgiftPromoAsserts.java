package com.paysgift.productservice.domain;

import static org.assertj.core.api.Assertions.assertThat;

public class PaysgiftPromoAsserts {

    /**
     * Asserts that the entity has all properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertPaysgiftPromoAllPropertiesEquals(PaysgiftPromo expected, PaysgiftPromo actual) {
        assertPaysgiftPromoAutoGeneratedPropertiesEquals(expected, actual);
        assertPaysgiftPromoAllUpdatablePropertiesEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all updatable properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertPaysgiftPromoAllUpdatablePropertiesEquals(PaysgiftPromo expected, PaysgiftPromo actual) {
        assertPaysgiftPromoUpdatableFieldsEquals(expected, actual);
        assertPaysgiftPromoUpdatableRelationshipsEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all the auto generated properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertPaysgiftPromoAutoGeneratedPropertiesEquals(PaysgiftPromo expected, PaysgiftPromo actual) {
        assertThat(actual)
            .as("Verify PaysgiftPromo auto generated properties")
            .satisfies(a -> assertThat(a.getId()).as("check id").isEqualTo(expected.getId()));
    }

    /**
     * Asserts that the entity has all the updatable fields set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertPaysgiftPromoUpdatableFieldsEquals(PaysgiftPromo expected, PaysgiftPromo actual) {
        assertThat(actual)
            .as("Verify PaysgiftPromo relevant properties")
            .satisfies(a -> assertThat(a.getIsActive()).as("check isActive").isEqualTo(expected.getIsActive()))
            .satisfies(a -> assertThat(a.getBannerImage()).as("check bannerImage").isEqualTo(expected.getBannerImage()))
            .satisfies(a -> assertThat(a.getBannerUrl()).as("check bannerUrl").isEqualTo(expected.getBannerUrl()))
            .satisfies(a -> assertThat(a.getCreatedAt()).as("check createdAt").isEqualTo(expected.getCreatedAt()))
            .satisfies(a -> assertThat(a.getCreatedBy()).as("check createdBy").isEqualTo(expected.getCreatedBy()))
            .satisfies(a -> assertThat(a.getUpdatedAt()).as("check updatedAt").isEqualTo(expected.getUpdatedAt()))
            .satisfies(a -> assertThat(a.getUpdatedBy()).as("check updatedBy").isEqualTo(expected.getUpdatedBy()));
    }

    /**
     * Asserts that the entity has all the updatable relationships set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertPaysgiftPromoUpdatableRelationshipsEquals(PaysgiftPromo expected, PaysgiftPromo actual) {
        // empty method
    }
}
