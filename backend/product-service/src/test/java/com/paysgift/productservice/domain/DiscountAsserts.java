package com.paysgift.productservice.domain;

import static org.assertj.core.api.Assertions.assertThat;

public class DiscountAsserts {

    /**
     * Asserts that the entity has all properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertDiscountAllPropertiesEquals(Discount expected, Discount actual) {
        assertDiscountAutoGeneratedPropertiesEquals(expected, actual);
        assertDiscountAllUpdatablePropertiesEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all updatable properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertDiscountAllUpdatablePropertiesEquals(Discount expected, Discount actual) {
        assertDiscountUpdatableFieldsEquals(expected, actual);
        assertDiscountUpdatableRelationshipsEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all the auto generated properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertDiscountAutoGeneratedPropertiesEquals(Discount expected, Discount actual) {
        assertThat(actual)
            .as("Verify Discount auto generated properties")
            .satisfies(a -> assertThat(a.getId()).as("check id").isEqualTo(expected.getId()));
    }

    /**
     * Asserts that the entity has all the updatable fields set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertDiscountUpdatableFieldsEquals(Discount expected, Discount actual) {
        assertThat(actual)
            .as("Verify Discount relevant properties")
            .satisfies(a -> assertThat(a.getCountryId()).as("check countryId").isEqualTo(expected.getCountryId()))
            .satisfies(a -> assertThat(a.getClientId()).as("check clientId").isEqualTo(expected.getClientId()))
            .satisfies(a -> assertThat(a.getChannelId()).as("check channelId").isEqualTo(expected.getChannelId()))
            .satisfies(a -> assertThat(a.getBrandId()).as("check brandId").isEqualTo(expected.getBrandId()))
            .satisfies(a -> assertThat(a.getName()).as("check name").isEqualTo(expected.getName()))
            .satisfies(a -> assertThat(a.getIsAllVoucher()).as("check isAllVoucher").isEqualTo(expected.getIsAllVoucher()))
            .satisfies(a -> assertThat(a.getPriority()).as("check priority").isEqualTo(expected.getPriority()))
            .satisfies(a -> assertThat(a.getStartDate()).as("check startDate").isEqualTo(expected.getStartDate()))
            .satisfies(a -> assertThat(a.getEndDate()).as("check endDate").isEqualTo(expected.getEndDate()))
            .satisfies(a -> assertThat(a.getIsActive()).as("check isActive").isEqualTo(expected.getIsActive()))
            .satisfies(a -> assertThat(a.getIsDelete()).as("check isDelete").isEqualTo(expected.getIsDelete()))
            .satisfies(a -> assertThat(a.getCreatedAt()).as("check createdAt").isEqualTo(expected.getCreatedAt()))
            .satisfies(a -> assertThat(a.getCreatedBy()).as("check createdBy").isEqualTo(expected.getCreatedBy()))
            .satisfies(a -> assertThat(a.getUpdatedAt()).as("check updatedAt").isEqualTo(expected.getUpdatedAt()))
            .satisfies(a -> assertThat(a.getUpdatedBy()).as("check updatedBy").isEqualTo(expected.getUpdatedBy()));
    }

    /**
     * Asserts that the entity has all the updatable relationships set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertDiscountUpdatableRelationshipsEquals(Discount expected, Discount actual) {
        // empty method
    }
}
