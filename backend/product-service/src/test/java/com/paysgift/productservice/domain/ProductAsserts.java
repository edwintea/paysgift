package com.paysgift.productservice.domain;

import static com.paysgift.productservice.domain.AssertUtils.bigDecimalCompareTo;
import static org.assertj.core.api.Assertions.assertThat;

public class ProductAsserts {

    /**
     * Asserts that the entity has all properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertProductAllPropertiesEquals(Product expected, Product actual) {
        assertProductAutoGeneratedPropertiesEquals(expected, actual);
        assertProductAllUpdatablePropertiesEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all updatable properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertProductAllUpdatablePropertiesEquals(Product expected, Product actual) {
        assertProductUpdatableFieldsEquals(expected, actual);
        assertProductUpdatableRelationshipsEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all the auto generated properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertProductAutoGeneratedPropertiesEquals(Product expected, Product actual) {
        assertThat(actual)
            .as("Verify Product auto generated properties")
            .satisfies(a -> assertThat(a.getId()).as("check id").isEqualTo(expected.getId()));
    }

    /**
     * Asserts that the entity has all the updatable fields set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertProductUpdatableFieldsEquals(Product expected, Product actual) {
        assertThat(actual)
            .as("Verify Product relevant properties")
            .satisfies(a -> assertThat(a.getCountryId()).as("check countryId").isEqualTo(expected.getCountryId()))
            .satisfies(a -> assertThat(a.getBrandId()).as("check brandId").isEqualTo(expected.getBrandId()))
            .satisfies(a -> assertThat(a.getCode()).as("check code").isEqualTo(expected.getCode()))
            .satisfies(a -> assertThat(a.getParentCode()).as("check parentCode").isEqualTo(expected.getParentCode()))
            .satisfies(a -> assertThat(a.getSkuCode()).as("check skuCode").isEqualTo(expected.getSkuCode()))
            .satisfies(a -> assertThat(a.getName()).as("check name").isEqualTo(expected.getName()))
            .satisfies(a -> assertThat(a.getNameEn()).as("check nameEn").isEqualTo(expected.getNameEn()))
            .satisfies(a -> assertThat(a.getDescription()).as("check description").isEqualTo(expected.getDescription()))
            .satisfies(a -> assertThat(a.getDescriptionEn()).as("check descriptionEn").isEqualTo(expected.getDescriptionEn()))
            .satisfies(a -> assertThat(a.getTnc()).as("check tnc").isEqualTo(expected.getTnc()))
            .satisfies(a -> assertThat(a.getTncEn()).as("check tncEn").isEqualTo(expected.getTncEn()))
            .satisfies(a -> assertThat(a.getHowToClaim()).as("check howToClaim").isEqualTo(expected.getHowToClaim()))
            .satisfies(a -> assertThat(a.getHowToClaimEn()).as("check howToClaimEn").isEqualTo(expected.getHowToClaimEn()))
            .satisfies(a -> assertThat(a.getDenom()).as("check denom").usingComparator(bigDecimalCompareTo).isEqualTo(expected.getDenom()))
            .satisfies(a ->
                assertThat(a.getBuyingPrice())
                    .as("check buyingPrice")
                    .usingComparator(bigDecimalCompareTo)
                    .isEqualTo(expected.getBuyingPrice())
            )
            .satisfies(a -> assertThat(a.getPrice()).as("check price").usingComparator(bigDecimalCompareTo).isEqualTo(expected.getPrice()))
            .satisfies(a -> assertThat(a.getIsUnlimited()).as("check isUnlimited").isEqualTo(expected.getIsUnlimited()))
            .satisfies(a -> assertThat(a.getQty()).as("check qty").isEqualTo(expected.getQty()))
            .satisfies(a -> assertThat(a.getPurchaseQty()).as("check purchaseQty").isEqualTo(expected.getPurchaseQty()))
            .satisfies(a -> assertThat(a.getRemainingQty()).as("check remainingQty").isEqualTo(expected.getRemainingQty()))
            .satisfies(a -> assertThat(a.getValidityPurchase()).as("check validityPurchase").isEqualTo(expected.getValidityPurchase()))
            .satisfies(a -> assertThat(a.getValidityStartDate()).as("check validityStartDate").isEqualTo(expected.getValidityStartDate()))
            .satisfies(a -> assertThat(a.getValidityEndDate()).as("check validityEndDate").isEqualTo(expected.getValidityEndDate()))
            .satisfies(a -> assertThat(a.getTag()).as("check tag").isEqualTo(expected.getTag()))
            .satisfies(a -> assertThat(a.getIsDelivery()).as("check isDelivery").isEqualTo(expected.getIsDelivery()))
            .satisfies(a -> assertThat(a.getIsActive()).as("check isActive").isEqualTo(expected.getIsActive()))
            .satisfies(a -> assertThat(a.getIsDelete()).as("check isDelete").isEqualTo(expected.getIsDelete()))
            .satisfies(a -> assertThat(a.getPermalink()).as("check permalink").isEqualTo(expected.getPermalink()))
            .satisfies(a -> assertThat(a.getUpdatedSync()).as("check updatedSync").isEqualTo(expected.getUpdatedSync()))
            .satisfies(a -> assertThat(a.getCreatedAt()).as("check createdAt").isEqualTo(expected.getCreatedAt()))
            .satisfies(a -> assertThat(a.getCreatedBy()).as("check createdBy").isEqualTo(expected.getCreatedBy()))
            .satisfies(a -> assertThat(a.getUpdatedAt()).as("check updatedAt").isEqualTo(expected.getUpdatedAt()))
            .satisfies(a -> assertThat(a.getUpdatedBy()).as("check updatedBy").isEqualTo(expected.getUpdatedBy()));
    }

    /**
     * Asserts that the entity has all the updatable relationships set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertProductUpdatableRelationshipsEquals(Product expected, Product actual) {
        // empty method
    }
}
