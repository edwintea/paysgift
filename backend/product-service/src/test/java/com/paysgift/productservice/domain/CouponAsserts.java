package com.paysgift.productservice.domain;

import static org.assertj.core.api.Assertions.assertThat;

public class CouponAsserts {

    /**
     * Asserts that the entity has all properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertCouponAllPropertiesEquals(Coupon expected, Coupon actual) {
        assertCouponAutoGeneratedPropertiesEquals(expected, actual);
        assertCouponAllUpdatablePropertiesEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all updatable properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertCouponAllUpdatablePropertiesEquals(Coupon expected, Coupon actual) {
        assertCouponUpdatableFieldsEquals(expected, actual);
        assertCouponUpdatableRelationshipsEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all the auto generated properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertCouponAutoGeneratedPropertiesEquals(Coupon expected, Coupon actual) {
        assertThat(actual)
            .as("Verify Coupon auto generated properties")
            .satisfies(a -> assertThat(a.getId()).as("check id").isEqualTo(expected.getId()));
    }

    /**
     * Asserts that the entity has all the updatable fields set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertCouponUpdatableFieldsEquals(Coupon expected, Coupon actual) {
        assertThat(actual)
            .as("Verify Coupon relevant properties")
            .satisfies(a -> assertThat(a.getCountryId()).as("check countryId").isEqualTo(expected.getCountryId()))
            .satisfies(a -> assertThat(a.getChannelId()).as("check channelId").isEqualTo(expected.getChannelId()))
            .satisfies(a -> assertThat(a.getBrandId()).as("check brandId").isEqualTo(expected.getBrandId()))
            .satisfies(a -> assertThat(a.getName()).as("check name").isEqualTo(expected.getName()))
            .satisfies(a -> assertThat(a.getTnc()).as("check tnc").isEqualTo(expected.getTnc()))
            .satisfies(a -> assertThat(a.getIsActive()).as("check isActive").isEqualTo(expected.getIsActive()))
            .satisfies(a -> assertThat(a.getIsDelete()).as("check isDelete").isEqualTo(expected.getIsDelete()))
            .satisfies(a -> assertThat(a.getCreatedAt()).as("check createdAt").isEqualTo(expected.getCreatedAt()))
            .satisfies(a -> assertThat(a.getCreatedBy()).as("check createdBy").isEqualTo(expected.getCreatedBy()))
            .satisfies(a -> assertThat(a.getUpdatedAt()).as("check updatedAt").isEqualTo(expected.getUpdatedAt()))
            .satisfies(a -> assertThat(a.getUpdatedBy()).as("check updatedBy").isEqualTo(expected.getUpdatedBy()))
            .satisfies(a -> assertThat(a.getN()).as("check n").isEqualTo(expected.getN()));
    }

    /**
     * Asserts that the entity has all the updatable relationships set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertCouponUpdatableRelationshipsEquals(Coupon expected, Coupon actual) {
        // empty method
    }
}
