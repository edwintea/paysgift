package com.paysgift.productservice.domain;

import static com.paysgift.productservice.domain.AssertUtils.bigDecimalCompareTo;
import static org.assertj.core.api.Assertions.assertThat;

public class CouponCodeAsserts {

    /**
     * Asserts that the entity has all properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertCouponCodeAllPropertiesEquals(CouponCode expected, CouponCode actual) {
        assertCouponCodeAutoGeneratedPropertiesEquals(expected, actual);
        assertCouponCodeAllUpdatablePropertiesEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all updatable properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertCouponCodeAllUpdatablePropertiesEquals(CouponCode expected, CouponCode actual) {
        assertCouponCodeUpdatableFieldsEquals(expected, actual);
        assertCouponCodeUpdatableRelationshipsEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all the auto generated properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertCouponCodeAutoGeneratedPropertiesEquals(CouponCode expected, CouponCode actual) {
        assertThat(actual)
            .as("Verify CouponCode auto generated properties")
            .satisfies(a -> assertThat(a.getId()).as("check id").isEqualTo(expected.getId()));
    }

    /**
     * Asserts that the entity has all the updatable fields set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertCouponCodeUpdatableFieldsEquals(CouponCode expected, CouponCode actual) {
        assertThat(actual)
            .as("Verify CouponCode relevant properties")
            .satisfies(a -> assertThat(a.getCouponId()).as("check couponId").isEqualTo(expected.getCouponId()))
            .satisfies(a -> assertThat(a.getProductId()).as("check productId").isEqualTo(expected.getProductId()))
            .satisfies(a -> assertThat(a.getCode()).as("check code").isEqualTo(expected.getCode()))
            .satisfies(a -> assertThat(a.getUseValidity()).as("check useValidity").isEqualTo(expected.getUseValidity()))
            .satisfies(a -> assertThat(a.getValidFrom()).as("check validFrom").isEqualTo(expected.getValidFrom()))
            .satisfies(a -> assertThat(a.getValidTo()).as("check validTo").isEqualTo(expected.getValidTo()))
            .satisfies(a -> assertThat(a.getCount()).as("check count").isEqualTo(expected.getCount()))
            .satisfies(a -> assertThat(a.getCountRemaining()).as("check countRemaining").isEqualTo(expected.getCountRemaining()))
            .satisfies(a -> assertThat(a.getUniquePerCustomer()).as("check uniquePerCustomer").isEqualTo(expected.getUniquePerCustomer()))
            .satisfies(a ->
                assertThat(a.getSubtotal()).as("check subtotal").usingComparator(bigDecimalCompareTo).isEqualTo(expected.getSubtotal())
            )
            .satisfies(a -> assertThat(a.getDiscountType()).as("check discountType").isEqualTo(expected.getDiscountType()))
            .satisfies(a ->
                assertThat(a.getDiscountAmount())
                    .as("check discountAmount")
                    .usingComparator(bigDecimalCompareTo)
                    .isEqualTo(expected.getDiscountAmount())
            )
            .satisfies(a ->
                assertThat(a.getDiscountMaxAmount())
                    .as("check discountMaxAmount")
                    .usingComparator(bigDecimalCompareTo)
                    .isEqualTo(expected.getDiscountMaxAmount())
            )
            .satisfies(a -> assertThat(a.getIsActive()).as("check isActive").isEqualTo(expected.getIsActive()))
            .satisfies(a -> assertThat(a.getIsDelete()).as("check isDelete").isEqualTo(expected.getIsDelete()))
            .satisfies(a -> assertThat(a.getCreatedAt()).as("check createdAt").isEqualTo(expected.getCreatedAt()))
            .satisfies(a -> assertThat(a.getCreatedBy()).as("check createdBy").isEqualTo(expected.getCreatedBy()))
            .satisfies(a -> assertThat(a.getUpdatedAt()).as("check updatedAt").isEqualTo(expected.getUpdatedAt()))
            .satisfies(a -> assertThat(a.getUpdatedBy()).as("check updatedBy").isEqualTo(expected.getUpdatedBy()));
    }

    /**
     * Asserts that the entity has all the updatable relationships set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertCouponCodeUpdatableRelationshipsEquals(CouponCode expected, CouponCode actual) {
        // empty method
    }
}
