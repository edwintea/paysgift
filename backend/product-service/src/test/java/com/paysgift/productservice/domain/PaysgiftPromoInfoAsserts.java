package com.paysgift.productservice.domain;

import static org.assertj.core.api.Assertions.assertThat;

public class PaysgiftPromoInfoAsserts {

    /**
     * Asserts that the entity has all properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertPaysgiftPromoInfoAllPropertiesEquals(PaysgiftPromoInfo expected, PaysgiftPromoInfo actual) {
        assertPaysgiftPromoInfoAutoGeneratedPropertiesEquals(expected, actual);
        assertPaysgiftPromoInfoAllUpdatablePropertiesEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all updatable properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertPaysgiftPromoInfoAllUpdatablePropertiesEquals(PaysgiftPromoInfo expected, PaysgiftPromoInfo actual) {
        assertPaysgiftPromoInfoUpdatableFieldsEquals(expected, actual);
        assertPaysgiftPromoInfoUpdatableRelationshipsEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all the auto generated properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertPaysgiftPromoInfoAutoGeneratedPropertiesEquals(PaysgiftPromoInfo expected, PaysgiftPromoInfo actual) {
        assertThat(actual)
            .as("Verify PaysgiftPromoInfo auto generated properties")
            .satisfies(a -> assertThat(a.getId()).as("check id").isEqualTo(expected.getId()));
    }

    /**
     * Asserts that the entity has all the updatable fields set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertPaysgiftPromoInfoUpdatableFieldsEquals(PaysgiftPromoInfo expected, PaysgiftPromoInfo actual) {
        assertThat(actual)
            .as("Verify PaysgiftPromoInfo relevant properties")
            .satisfies(a -> assertThat(a.getPaysgiftPromoId()).as("check paysgiftPromoId").isEqualTo(expected.getPaysgiftPromoId()))
            .satisfies(a -> assertThat(a.getVoucherId()).as("check voucherId").isEqualTo(expected.getVoucherId()))
            .satisfies(a -> assertThat(a.getCreatedAt()).as("check createdAt").isEqualTo(expected.getCreatedAt()))
            .satisfies(a -> assertThat(a.getCreatedBy()).as("check createdBy").isEqualTo(expected.getCreatedBy()))
            .satisfies(a -> assertThat(a.getUpdatedAt()).as("check updatedAt").isEqualTo(expected.getUpdatedAt()))
            .satisfies(a -> assertThat(a.getUpdatedBy()).as("check updatedBy").isEqualTo(expected.getUpdatedBy()));
    }

    /**
     * Asserts that the entity has all the updatable relationships set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertPaysgiftPromoInfoUpdatableRelationshipsEquals(PaysgiftPromoInfo expected, PaysgiftPromoInfo actual) {
        // empty method
    }
}
