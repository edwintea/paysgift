package com.paysgift.productservice.domain;

import static org.assertj.core.api.Assertions.assertThat;

public class ProductFavouriteAsserts {

    /**
     * Asserts that the entity has all properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertProductFavouriteAllPropertiesEquals(ProductFavourite expected, ProductFavourite actual) {
        assertProductFavouriteAutoGeneratedPropertiesEquals(expected, actual);
        assertProductFavouriteAllUpdatablePropertiesEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all updatable properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertProductFavouriteAllUpdatablePropertiesEquals(ProductFavourite expected, ProductFavourite actual) {
        assertProductFavouriteUpdatableFieldsEquals(expected, actual);
        assertProductFavouriteUpdatableRelationshipsEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all the auto generated properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertProductFavouriteAutoGeneratedPropertiesEquals(ProductFavourite expected, ProductFavourite actual) {
        assertThat(actual)
            .as("Verify ProductFavourite auto generated properties")
            .satisfies(a -> assertThat(a.getId()).as("check id").isEqualTo(expected.getId()));
    }

    /**
     * Asserts that the entity has all the updatable fields set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertProductFavouriteUpdatableFieldsEquals(ProductFavourite expected, ProductFavourite actual) {
        assertThat(actual)
            .as("Verify ProductFavourite relevant properties")
            .satisfies(a -> assertThat(a.getProductId()).as("check productId").isEqualTo(expected.getProductId()))
            .satisfies(a -> assertThat(a.getCustomerId()).as("check customerId").isEqualTo(expected.getCustomerId()))
            .satisfies(a -> assertThat(a.getCountryId()).as("check countryId").isEqualTo(expected.getCountryId()))
            .satisfies(a -> assertThat(a.getChannelId()).as("check channelId").isEqualTo(expected.getChannelId()))
            .satisfies(a -> assertThat(a.getBrandId()).as("check brandId").isEqualTo(expected.getBrandId()))
            .satisfies(a -> assertThat(a.getCreatedAt()).as("check createdAt").isEqualTo(expected.getCreatedAt()))
            .satisfies(a -> assertThat(a.getCreatedBy()).as("check createdBy").isEqualTo(expected.getCreatedBy()))
            .satisfies(a -> assertThat(a.getUpdatedAt()).as("check updatedAt").isEqualTo(expected.getUpdatedAt()))
            .satisfies(a -> assertThat(a.getUpdatedBy()).as("check updatedBy").isEqualTo(expected.getUpdatedBy()));
    }

    /**
     * Asserts that the entity has all the updatable relationships set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertProductFavouriteUpdatableRelationshipsEquals(ProductFavourite expected, ProductFavourite actual) {
        // empty method
    }
}
