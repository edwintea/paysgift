package com.paysgift.productservice.domain;

import static com.paysgift.productservice.domain.AssertUtils.bigDecimalCompareTo;
import static org.assertj.core.api.Assertions.assertThat;

public class EvoucherDeliveryAsserts {

    /**
     * Asserts that the entity has all properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertEvoucherDeliveryAllPropertiesEquals(EvoucherDelivery expected, EvoucherDelivery actual) {
        assertEvoucherDeliveryAutoGeneratedPropertiesEquals(expected, actual);
        assertEvoucherDeliveryAllUpdatablePropertiesEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all updatable properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertEvoucherDeliveryAllUpdatablePropertiesEquals(EvoucherDelivery expected, EvoucherDelivery actual) {
        assertEvoucherDeliveryUpdatableFieldsEquals(expected, actual);
        assertEvoucherDeliveryUpdatableRelationshipsEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all the auto generated properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertEvoucherDeliveryAutoGeneratedPropertiesEquals(EvoucherDelivery expected, EvoucherDelivery actual) {
        assertThat(actual)
            .as("Verify EvoucherDelivery auto generated properties")
            .satisfies(a -> assertThat(a.getId()).as("check id").isEqualTo(expected.getId()));
    }

    /**
     * Asserts that the entity has all the updatable fields set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertEvoucherDeliveryUpdatableFieldsEquals(EvoucherDelivery expected, EvoucherDelivery actual) {
        assertThat(actual)
            .as("Verify EvoucherDelivery relevant properties")
            .satisfies(a -> assertThat(a.getCountryId()).as("check countryId").isEqualTo(expected.getCountryId()))
            .satisfies(a -> assertThat(a.getType()).as("check type").isEqualTo(expected.getType()))
            .satisfies(a -> assertThat(a.getPrice()).as("check price").usingComparator(bigDecimalCompareTo).isEqualTo(expected.getPrice()))
            .satisfies(a -> assertThat(a.getCreatedAt()).as("check createdAt").isEqualTo(expected.getCreatedAt()))
            .satisfies(a -> assertThat(a.getCreatedBy()).as("check createdBy").isEqualTo(expected.getCreatedBy()))
            .satisfies(a -> assertThat(a.getUpdatedAt()).as("check updatedAt").isEqualTo(expected.getUpdatedAt()))
            .satisfies(a -> assertThat(a.getUpdatedBy()).as("check updatedBy").isEqualTo(expected.getUpdatedBy()));
    }

    /**
     * Asserts that the entity has all the updatable relationships set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertEvoucherDeliveryUpdatableRelationshipsEquals(EvoucherDelivery expected, EvoucherDelivery actual) {
        // empty method
    }
}
